#lang racket
(require 2htdp/image)
(require 2htdp/universe)
(require lang/posn)

;;custom colors
;;(make-color r g b a)
(define SEAFOAM (make-color 104 220 171 85))
(define CLEAR (make-color 100 100 100 0))
(define light-wind (make-color 0 158 158 200))
(define dark-wind (make-color 0 133 133 250))
;;(define SEAFOAM "CadetBlue")


;****************
;;Walley Character
;****************
; images and draw-functions
;draw-walley function used to move/animate walley based on time and mood state
; takes time and mood as args
; returns image object
(define (draw-walley mood t)
   ;;face
  (let* ([happy-face (add-line
                      (add-line
                       (add-curve        
                        (polygon (list (make-pulled-point 1/2 45 0 0 1/2 -45) ;;top point
                                       (make-pulled-point 1/2 45 40 40 1/2 -45) ;;right middle
                                       (make-pulled-point 1/2 45 0 80 0 0)  ;;bottom middle
                                       (make-pulled-point 3/4 10 -44 76 5/6 10) ;;left bottom corner
                                       (make-pulled-point 1/4 0 -40 40 1/2 -45)) ;;left middle
                                 "solid"
                                 "SkyBlue")
                        35 50 -30 1/2 60 50 30 1/2 "darkblue")
                       7 65 0 80 "darkblue")
                      15 75 0 80 "darkblue")]
         [sad-face (add-line
                    (add-line
                     (add-curve        
                      (polygon (list (make-pulled-point 1/2 45 0 0 1/2 -45) ;;top point
                                     (make-pulled-point 1/2 45 40 40 1/2 -45) ;;right middle
                                     (make-pulled-point 1/2 45 0 80 0 0)  ;;bottom middle
                                     (make-pulled-point 3/4 10 -44 76 5/6 10) ;;left bottom corner
                                     (make-pulled-point 1/4 0 -40 40 1/2 -45)) ;;left middle
                               "solid"
                               "SkyBlue")
                      35 50 30 1/2 60 50 -30 1/2 "red")
                     7 65 0 80 "darkblue")
                    15 75 0 80 "darkblue")]
         [face (cond
                 ((eq? mood 'happy) happy-face)
                 ((eq? mood 'swimming) happy-face)
                 ((eq? mood 'super) happy-face)
                 (else sad-face))]
         [eye-r (overlay/offset (circle 5 "solid" "white")
                  -3 1
                  (circle 9 "solid" "RoyalBlue"))]
         [eye-l (overlay/offset (circle 5 "solid" "white")
                  -3 1
                  (circle 9 "solid" "RoyalBlue"))]
         [ping (pulled-regular-polygon 10 4 3/4 25 "solid" "Ghostwhite")]
         [horn (rotate -30(scene+curve
                           (scene+curve
                            (scene+curve
                             (scene+curve
                              (scene+curve
                               (scene+curve
                                (polygon (list (make-posn 0 0) ;;tip point
                                               (make-pulled-point 1/3 0 22 45 1/2 -45) ;;right point
                                               (make-pulled-point 1/3 45 0 45 1/2 0)) ;;left tail point
                                         "solid"
                                         "burlywood")
                                0 36 -45 1/2
                                18 37 45 1/3
                                "DarkGoldenrod")
                               0 28 -45 1/2
                               14 29 45 1/3
                               "DarkGoldenrod")
                              0 21 -45 1/2
                              11 22 45 1/3
                              "DarkGoldenrod")
                             0 15 -45 1/2
                             8 16 45 1/3
                             "DarkGoldenrod")
                            0 10 -45 1/2
                            5 11 45 1/3
                            "DarkGoldenrod")
                           0 5 -45 1/2
                           3 6 45 1/3
                           "DarkGoldenrod"))]
         ;;create closed polygon using list of posn's(x y), points in clockwise order
         [tail(rotate (cond ((odd? t) 30)
                            (else 60))
                      (polygon (list (make-pulled-point 1/2 10 30 10 1/2 -10) ;;middle tail point
                                     (make-pulled-point 1/2 45 60 10 3/4 45) ;;right tail point
                                     (make-pulled-point 1/2 -10 40 70 1/2 -20) ;;body tail point
                                     (make-pulled-point 1/2 -20 0 10 1/2 -45)) ;;left tail point
                               "solid"
                               "CornflowerBlue"))]
         [body (polygon (list (make-pulled-point 1/2 45 0 0 1/2 -45) ;;top point
                              (make-pulled-point 1/2 45 40 40 1/2 -45) ;;right middle
                              (make-pulled-point 1/2 45 -20 100 0 0)  ;;bottom middle
                              (make-pulled-point 3/4 10 -70 85 5/6 5) ;;left bottom corner
                              (make-pulled-point 1/2 -20 -40 40 1/2 -45)) ;;left middle
                        "solid"
                        "CornflowerBlue")]
         [face-posn (make-posn 112 85)]
         [eye-r-posn (make-posn 100 70)]
         [eye-l-posn (make-posn 145 68)]
         [horn-posn (make-posn 120 35)]
         [body-posn (make-posn 98 95)]
         [tail-posn (make-posn 35 110)])
         ;;underlays images in order of list
         (place-images (list eye-r eye-l (if(eq? mood 'super) (super-horn t) horn) face tail body)
                       (list eye-r-posn eye-l-posn horn-posn face-posn tail-posn body-posn)
                       (rectangle 170 150 "outline" CLEAR))))

;;constants for walley
(define happy-walley
 (draw-walley 'swimming 0))
(define sad-walley
 (draw-walley 'dead 0))
(define super-walley
  (draw-walley 'super 0))

;;Swim method
;;draws walley in a specific direction
; takes mood, direction(string) and time args
; return image object
(define (swim mood direction time)
  (if (eq? direction "left")
      (flip-horizontal (draw-walley mood time))
      (draw-walley mood time)))

(define (posn-offset pos offset)
  (let ((posn-updated-x (+ (posn-x pos) (posn-x offset)))
        (posn-updated-y (+ (posn-y pos) (posn-y offset))))
    (if (< posn-updated-x 0)
        (make-posn (+ posn-updated-x (posn-x WINDOW)) posn-updated-y)
        (make-posn (modulo posn-updated-x (posn-x WINDOW)) posn-updated-y))))

(define (move_walley s direction)
  (let ((posn-offset-x (cond ((eq? direction "right") STEP_SIZE_X)
                             ((eq? direction "left") (* -1 STEP_SIZE_X)) 
                             (else 0)))
        (posn-offset-y (cond ((eq? direction "down") STEP_SIZE_Y)
                             ((and (eq? direction "up") (touching-spout-tile? s)) (* -1 STEP_SIZE_Y))
                            (else 0))))
       (make-player (player-state (world-player s))
                    (posn-offset (player-position (world-player s)) (make-posn posn-offset-x posn-offset-y))
                    direction
                    (player-lives (world-player s)))))
